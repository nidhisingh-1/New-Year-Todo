{"version":3,"sources":["components/Header.js","components/Footer.js","components/ListItem.js","components/List.js","App.js","reportWebVitals.js","index.js"],"names":["Header","src","Footer","ListItem","props","useState","isComplete","setIsComplete","styles","backgroundColor","className","style","Row","Col","xs","Form","Check","type","value","onChange","item","List","Resolutions","AddResolution","newReso","setNewReso","listitems","map","Resolution","keys","md","placeholder","e","target","Button","size","block","onClick","currentReso","push","addToResolution","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yQAaiBA,MAXjB,WACI,OACE,mCACI,qBAAKC,IAAM,oCACX,iE,MCKOC,MATjB,WACI,OACE,iCACG,4D,qDCmBQC,MApBjB,SAAkBC,GAAQ,IAAD,EAEeC,oBAAS,GAFxB,mBAEdC,EAFc,KAEFC,EAFE,KAIjBC,EAAS,GAKb,OAJGF,IACCE,EAAS,CAACC,gBAAiB,YAI3B,qBAAKC,UAAW,YAAYC,MAAOH,EAAnC,SACI,eAACI,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAKC,GAAI,EAAT,SAAY,cAACC,EAAA,EAAKC,MAAN,CAAYC,KAAO,WAAWC,MAAOZ,EAC7Ca,SAAW,WAAOZ,GAAeD,QACrC,cAACO,EAAA,EAAD,CAAKC,GAAI,GAAT,SAAcV,EAAMgB,a,QCkCnBC,MA7CjB,WAAiB,IAAD,EACuBhB,mBAAS,CAC5C,iBACA,UACA,aACA,oBALY,mBACPiB,EADO,KACMC,EADN,OAQgBlB,mBAAS,IARzB,mBAQPmB,EARO,KAQEC,EARF,KAURC,EAAYJ,EAAYK,KAAI,SAACC,GAAD,OAClC,cAAC,EAAD,CAAUC,KAAMD,EAAYR,KAAQQ,OAQlC,OACE,sBAAKlB,UAAW,iBAAhB,UACA,oBAAIA,UAAW,cAAf,0CACA,eAACE,EAAA,EAAD,WACA,cAACC,EAAA,EAAD,CAAKC,GAAI,GAAIgB,GAAI,EAAjB,SACE,uBACEC,YAAY,0BACZrB,UAAU,aACVQ,MAAOM,EACPL,SAAU,SAAAa,GAAC,OAAIP,EAAWO,EAAEC,OAAOf,YAGrC,cAACL,EAAA,EAAD,CAAKC,GAAI,GAAIgB,GAAI,EAAjB,SACE,cAACI,EAAA,EAAD,CAAQC,KAAK,KAAKC,OAAK,EAAC1B,UAAU,gBAAgB2B,QAAS,YAnBnE,SAAyBT,GACvB,IAAMU,EAAW,YAAOhB,GACxBgB,EAAYC,KAAKX,GACjBL,EAAce,GAgB0DE,CAAgBhB,GAAUC,EAAW,KAAvG,2BAKHC,MC5BQe,MAVf,WACE,OACE,sBAAK/B,UAAU,MAAf,UACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,QCCWgC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ad0d3d76.chunk.js","sourcesContent":["import \"./Header.css\";\r\n\r\nfunction Header() {\r\n    return (\r\n      <header>\r\n          <img src = \"https://i.imgur.com/R6hCNmX.png\"></img>\r\n          <h1>\r\n              My New Year Resolution List\r\n          </h1>\r\n      </header>\r\n    );\r\n  }\r\n  \r\n  export default Header;\r\n  ","import \"./Footer.css\";\r\n\r\nfunction Footer() {\r\n    return (\r\n      <footer>\r\n         <p> &copy; Nidhi Singh ‚ú®</p>\r\n          \r\n      </footer>\r\n    );\r\n  }\r\n  \r\n  export default Footer;\r\n  ","import { Col, Row, Form} from \"react-bootstrap\";\r\nimport \"./ListItem.css\";\r\nimport React, { useState } from 'react';\r\n\r\nfunction ListItem(props) {\r\n\r\n    const [isComplete, setIsComplete] = useState(false)\r\n\r\n    let styles = {}\r\n    if(isComplete) {\r\n        styles = {backgroundColor: \"#c90e52\"}\r\n    }\r\n\r\n    return (\r\n        <div className= \"List-item\" style={styles}>\r\n            <Row>\r\n                <Col xs={1}><Form.Check type = \"checkbox\" value={isComplete}\r\n                    onChange={ () => {setIsComplete(!isComplete)} }></Form.Check></Col>\r\n                <Col xs={10}>{props.item}</Col>\r\n            </Row>\r\n        </div>\r\n    );\r\n  }\r\n  \r\n  export default ListItem;\r\n  ","import \"./List.css\";\r\nimport ListItem from \"./ListItem\";\r\nimport React, { useState } from 'react';\r\nimport { Row } from \"react-bootstrap\";\r\nimport { Col } from \"react-bootstrap\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nfunction List() {\r\n  const [Resolutions, AddResolution] = useState([\r\n    \"Learn to drive\",\r\n    \"Get fit\",\r\n    \"Code daily\",\r\n    \"Read more books\"\r\n  ]);\r\n\r\n  const [newReso, setNewReso] = useState(\"\")\r\n\r\n  const listitems = Resolutions.map((Resolution) =>\r\n  <ListItem keys={Resolution} item = {Resolution}/>);\r\n\r\n  function addToResolution(Resolution){\r\n    const currentReso = [...Resolutions]\r\n    currentReso.push(Resolution)\r\n    AddResolution(currentReso)\r\n  }\r\n\r\n    return (\r\n      <div className= \"List-container\">\r\n      <h2 className= \"List-header\">üçæ Tasks for 2021 </h2>\r\n      <Row>\r\n      <Col xs={12} md={9}>\r\n        <input\r\n          placeholder=\"Type a new task here...\"\r\n          className=\"List-input\"\r\n          value={newReso}\r\n          onChange={e => setNewReso(e.target.value)}\r\n        />\r\n        </Col>\r\n        <Col xs={12} md={3}>\r\n          <Button size=\"lg\" block className=\"submit-button\" onClick={() => {addToResolution(newReso); setNewReso(\"\")}}>Add Task</Button>\r\n        </Col>\r\n      </Row>\r\n      \r\n      \r\n      {listitems}\r\n\r\n      \r\n\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default List;\r\n  ","import Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport List from \"./components/List\";\nimport { Container } from \"react-bootstrap\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Header></Header>\n    <List></List>\n    <Footer></Footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}